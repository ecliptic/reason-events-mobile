// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ApiClient = require("../clients/ApiClient.bs.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function fromResponse(input) {
  return {
          id: Js_option.getWithDefault("", Js_json.decodeString(input.id)),
          email: input.email,
          headline: input.headline,
          mailingList: input.mailingList,
          name: input.name
        };
}

function toInput(user) {
  return {
          id: Js_option.some(user.id),
          email: user.email,
          headline: user.headline,
          mailingList: user.mailingList,
          name: user.name
        };
}

var Graphql_error = Caml_exceptions.create("UserData.UserById.Graphql_error");

var query = "query UserById($id: UUID!)  {\nuserById(id: $id)  {\nid  \nname  \nemail  \nheadline  \nmailingList  \n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var value$1 = match[0]["userById"];
    var match$1 = Js_json.decodeNull(value$1);
    var tmp;
    if (match$1) {
      tmp = /* None */0;
    } else {
      var match$2 = Js_json.decodeObject(value$1);
      var tmp$1;
      if (match$2) {
        var value$2 = match$2[0];
        var value$3 = value$2["name"];
        var match$3 = Js_json.decodeNull(value$3);
        var tmp$2;
        if (match$3) {
          tmp$2 = /* None */0;
        } else {
          var match$4 = Js_json.decodeString(value$3);
          var tmp$3;
          if (match$4) {
            tmp$3 = match$4[0];
          } else {
            throw Graphql_error;
          }
          tmp$2 = /* Some */[tmp$3];
        }
        var value$4 = value$2["email"];
        var match$5 = Js_json.decodeNull(value$4);
        var tmp$4;
        if (match$5) {
          tmp$4 = /* None */0;
        } else {
          var match$6 = Js_json.decodeString(value$4);
          var tmp$5;
          if (match$6) {
            tmp$5 = match$6[0];
          } else {
            throw Graphql_error;
          }
          tmp$4 = /* Some */[tmp$5];
        }
        var value$5 = value$2["headline"];
        var match$7 = Js_json.decodeNull(value$5);
        var tmp$6;
        if (match$7) {
          tmp$6 = /* None */0;
        } else {
          var match$8 = Js_json.decodeString(value$5);
          var tmp$7;
          if (match$8) {
            tmp$7 = match$8[0];
          } else {
            throw Graphql_error;
          }
          tmp$6 = /* Some */[tmp$7];
        }
        var value$6 = value$2["mailingList"];
        var match$9 = Js_json.decodeNull(value$6);
        var tmp$8;
        if (match$9) {
          tmp$8 = /* None */0;
        } else {
          var match$10 = Js_json.decodeBoolean(value$6);
          var tmp$9;
          if (match$10) {
            tmp$9 = match$10[0];
          } else {
            throw Graphql_error;
          }
          tmp$8 = /* Some */[tmp$9];
        }
        tmp$1 = {
          id: value$2["id"],
          name: tmp$2,
          email: tmp$4,
          headline: tmp$6,
          mailingList: tmp$8
        };
      } else {
        throw Graphql_error;
      }
      tmp = /* Some */[tmp$1];
    }
    return {
            userById: tmp
          };
  } else {
    throw Graphql_error;
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_UUID(value) {
  return value;
}

function make(id, _) {
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "id",
                  id
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var id = variables.id;
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "id",
                  id
                ],
                /* [] */0
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var UserById = /* module */[
  /* Graphql_error */Graphql_error,
  /* query */query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_UUID */json_of_UUID,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

function userById(id) {
  var arg = make(id, /* () */0);
  return (function (eta) {
              return ApiClient.query(/* None */0, arg, eta);
            })(ApiClient.client);
}

var getWithDefault = Js_option.getWithDefault;

var some = Js_option.some;

exports.getWithDefault = getWithDefault;
exports.some = some;
exports.fromResponse = fromResponse;
exports.toInput = toInput;
exports.UserById = UserById;
exports.userById = userById;
/* Js_dict Not a pure module */
